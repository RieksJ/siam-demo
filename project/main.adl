CONTEXT SIAMv4_0 IN ENGLISH -- SIAM: Sessions, Identity- and Access Management
-- The purpose of this file is to provide an easy way for users of the module to include SIAM functionality.

--! git@ci.tno.nl:ampersand/ssif.git has the authoratative source of SIAMv4.

--[The demo consists of a portal with the interfaces that it makes available]
   INCLUDE "./Generic_Views.adl"   -- a collection of views with general applicability (not all are used)
   INCLUDE "./SIAM_DemoPortal.adl" -- the mail interface of the demo, from which all other demo-interfaces are called.

--[Specifying the identity of the system itself, and some attributes]
    INCLUDE "./SIAM_Who_I_Am.adl"           -- Define the Actor that represents this system.
-- POPULATION actorRef   CONTAINS [ ("I_Am","<ActorRef>")]     -- The name that can be used to refer to the system.
   POPULATION actorRef   CONTAINS [ ("I_Am","SIAM Example application")]     -- The name that can be used to refer to the system.
-- POPULATION ownerRef   CONTAINS [ ("I_Am","<PartyRef>")]     -- The name of the Party that (supposedly) owns the system.
   POPULATION ownerRef   CONTAINS [ ("I_Am","TNO SSI-Lab")]    -- The name of the Party that (supposedly) owns the system.
-- POPULATION myLogofile CONTAINS [ ("I_Am","<Fileid>") ]      -- id of the file that can be used to show the system's logo.
   POPULATION myAutoAccRegPref CONTAINS [ ("I_Am","I_Am") ]    -- Allow registration of Accounts by users (presenting a credential)
-- Other attributes may be associated with `I_Am`, for purposes other than SIAM.

--[Always INCLUDE the basics]
    INCLUDE "./SIAM_PF_Integration.adl"     -- Integration with code and quircks from the Prototype Framework.
    INCLUDE "./SIAM_Basics.adl"             -- This is the **Core functionality**: Accounts, Sessions, Roles, etc.

--[Optionally INCLUDE general interface(s), e.g. for Developers] -- Ifc for inspecting SESSION, Accounts, Parties, Actors, Persons, Organizations and Roles.
    INCLUDE "./SIAM_Developer.ifc" --# [ "NoMainDevIfc" ]
    INCLUDE "./SIAM_Views.ifc"              -- Views, e.g. for showing Accounts.

--[Optionally INCLUDE Account registration and management]
    INCLUDE "./SIAM_AccountRegUsingForm.adl"-- Create Account for a User (=Actor/Party pair) based on filling in a Form.
    INCLUDE "./SIAM_AccountRegUsingUID.adl" -- Create Account for a User (=Actor/Party pair) based on him having logged in with a UID.
    INCLUDE "./SIAM_AccountManagement.ifc"  -- Set if INTERFACEs for managing Accounts.

--[Choose your support for login, suspend, logout]
--  INCLUDE "./SIAM_ISO_LoA.adl"            -- Extension that introduces ISO authentication levels in a basic fashion.
    INCLUDE "./SIAM_LoginLogging.adl"       -- Extension that keeps track of when logins are done.
    INCLUDE "./SIAM_LoginWithUPW.adl"       -- Login using U/PW (Usernames and Passwords).
--  INCLUDE "./SIAM_LoginWithUID.adl"       -- Login using UIDs (userids from third Party identity providers).

--[Choose your INTERFACEs for Login/Logout]
    INCLUDE "./SIAM_Logout.ifc"             -- Interface: Logout interface (always include this).
-- **Only one of the following can be active at any time**.
    INCLUDE "./SIAM_LoginForDevelopers.ifc" -- Interface: Login/Register/Logout interface for use by developers.
--  INCLUDE "./SIAM_LoginWithUPW.ifc"       -- Interface: U/PW Login/Register interface for use by non-developers.
--  INCLUDE "./SIAM_LoginWithUID.ifc"       -- Interface: UID Login interface for use by non-developers.

--[Optionally INCLUDE extensions for handling Organizations]
    INCLUDE "./SIAM_Organizations.adl"      -- Extension that implements Organizations (as a Party).
    INCLUDE "./SIAM_Organizations.ifc"      -- Interfaces for managing Organization objects.

--[Optionally INCLUDE extensions for handling Persons]
    INCLUDE "./SIAM_Persons.adl"            -- Extension that implements Person objects (as Parties AND Actors).
    INCLUDE "./SIAM_PersonAttributes.adl"   -- Add support for basic attributes
    INCLUDE "./SIAM_PersonAttributes.ifc"   -- Interface for managing Person objects.

--[Examples of possibly useful RULEs that may be uncommented and adjusted as necessary]

--[INJectivity of Ref-names]
   RULE "`partyRef` must identify a Party": partyRef;partyRef~ |- I[Party]
   RULE "`actorRef` must identify an Actor": actorRef;actorRef~ |- I[Actor]
   RULE "`orgRef` must identify an Organization": orgRef;orgRef~ |- I[Organization]
   RULE "`personRef` must identify a Person": personRef;personRef~ |- I[Person]

--[SysAdmin account]
-- Activate this rule if you want to ensure you have a SystemAdmin account
   ROLE ExecEngine MAINTAINS "Create SystemAdmin account if the default population doesn't have it"
   RULE "Create SystemAdmin account if the default population doesn't have it": I[ONE] |- V;accIsSysAdmin;V
   VIOLATION (TXT "{EX} InsAtom;Account"
             ,TXT "{EX} InsPair;accIsSysAdmin;Account;_NEW;Account;_NEW"
             ,TXT "{EX} InsPair;accUserid;Account;_NEW;Userid;admin"
             ,TXT "{EX} InsPair;accPassword;Account;_NEW;Password;admin"
             ) --}
   ROLE ExecEngine MAINTAINS "Assign sysadmin account PartyRef of I_Am"
   RULE "Assign sysadmin account PartyRef of I_Am": 
      (accIsSysAdmin-accPartyRef;accPartyRef~);V[Account*I_Am];ownerRef |- accPartyRef
   VIOLATION (TXT "{EX} InsPair;accPartyRef;Account;", SRC I, TXT ";PartyRef;", TGT I)
   ROLE ExecEngine MAINTAINS "Assign sysadmin account ActorRef of I_Am"
   RULE "Assign sysadmin account ActorRef of I_Am": 
      (accIsSysAdmin-accActorRef;accActorRef~);V[Account*I_Am];actorRef |- accActorRef
   VIOLATION (TXT "{EX} InsPair;accPartyRef;Account;", SRC I, TXT ";PartyRef;", TGT I)

--[Account initialization]--
{- Creating an account (e.g. when importing through an Excel file) does not make it usable immediately.
For example, its property `accIsActive` must be set before it can be used to login with.
The property `accIsInitialized` is defined to help distinguish between Accounts that are, and those that are not initialized.
Note: setting the property `accIsActive` will automatically also set `accIsInitialized`.-}

   ROLE ExecEngine MAINTAINS "Account activation/initialization"
   RULE "Account activation/initialization": I[Account] |- accIsInitialized
   VIOLATION (TXT "{EX} InsPair;accIsActive;Account;", SRC I, TXT ";Account;", TGT I
             -- `accIsInitialized` will now automatically be set by RULE `Active accounts are initialized`
             ) --}

--[Set default interfaces for anonymous sessions and user sessions]
--* CHECK IF YOU NEED TO POPULATE the 'I_Am' relations as well (see lines 7-9 or thereabout) *--
{- --POPULATION isInvisible CONTAINS [ ("Login", "Login") ] -- Only needed in case it isn't used in the AnonHome/Portal
   ROLE ExecEngine MAINTAINS "Set NavTo interfaces for session"
   RULE "Set NavTo interfaces for session": I[SESSION] |- sessionIfcsSet
   VIOLATION (TXT "{EX} InsPair;sessionAnonIfc;SESSION;", SRC I, TXT ";NavToIfc;/AnonHome" -- This interface appears when no user has logged in.
             ,TXT "{EX} InsPair;sessionUserIfc;SESSION;", SRC I, TXT ";NavToIfc;/UserHome" --<-- This interface will appear after a succesful login,
             ) --}                                                                            -- but is overridden by `accUserIfc` if that exists.

--[Auto activate auto-login accounts]
-- This rule should be activated if you want newly registered users to automatically login!
{- ROLE ExecEngine MAINTAINS "Auto activate auto-login accounts"
   RULE "Auto activate auto-login accounts": accAutoLoginReq |- accIsActive
   VIOLATION (TXT "{EX} InsPair;accIsActive;Account;", SRC I, TXT ";Account;", TGT I) --}

--[Initially, allowed roles are default Roles]--
{- ROLE ExecEngine MAINTAINS "Initially, allowed roles are also default roles"
   RULE "Initially, allowed roles are also default roles":
   (I-(accDefaultRoles;(I-"User");accDefaultRoles~));accAllowedRoles |- accDefaultRoles
   VIOLATION (TXT "{EX} InsPair;accDefaultRoles;Account;", SRC I, TXT ";Role;", TGT I) --}

--[Always, allowed roles are default Roles]--
{- ROLE ExecEngine MAINTAINS "Always, allowed roles are also default roles"
   RULE "Always, allowed roles are also default roles": accAllowedRoles |- accDefaultRoles
   VIOLATION (TXT "{EX} InsPair;accDefaultRoles;Account;", SRC I, TXT ";Role;", TGT I) --}

--[Party roles]--
{- partyRole :: Party * Role MEANING "Roles that are applicable to all accounts of the organization"
   RULE "Systemroles cannot be organization-roles": partyRole;systemRole |- -V
   ROLE ExecEngine MAINTAINS "Automatically assign organization roles"
   RULE "Automatically assign organization roles" : accParty;partyRole |- accAllowedRoles
   VIOLATION (TXT "{EX}InsPair;accAllowedRoles;Account;", SRC I, TXT ";Role;", TGT I) --}

ENDCONTEXT
